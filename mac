#!/usr/bin/env bash
#
# credits:
#   - largely lifted from the thoughtbot laptop script: https://github.com/thoughtbot/laptop
#   - https://github.com/alexmchale/shell-files/blob/master/install.sh
#   - https://github.com/vsbuffalo/dotfiles/blob/master/setup.sh
#   - https://groups.google.com/forum/#!topic/alt.ascii-art/6wizj1sEC6s
#   - # ~/.osx — https://mths.be/osx
#
# turn your laptop into an awesome development machine!
#


# Set up the environment
# ======================================

  OS="`uname -s`"
  Xcode_strict="false"
  Ascii_art_mode="false"
  # source some ascii-art, make it moar fun
  source /dev/stdin <<< "$(curl --insecure https://raw.githubusercontent.com/jruffing/laptop/bsc-customization/ascii_art)"


# Define some useful functions for installation
# ======================================

RCol='\033[0m'
Gre='\033[0;32m'
Red='\033[0;31m'
Yel='\033[0;33m'

function gecho {
  echo "${Gre}[message] $1${RCol}"
}

function yecho {
  echo "${Yel}[warning] $1${RCol}"
}

function recho {
  echo "${Red}[error] $1${RCol}"
  exit 1
}


fancy_echo() {
  printf "\n%b\n" "$1"
}

function announce {
  echo
  echo
  echo "====> $1"
  echo
}

# float number comparison
function fcomp() {
    awk -v n1=$1 -v n2=$2 'BEGIN{ if (n1<n2) exit 0; exit 1}'
}

# test and example
function fcomp_test() {
    if fcomp $1 $2; then
       #echo "$1<$2"
       return $1
    else
       #echo "$1>=$2"
       return $2
    fi
}

function clone_or_update {

  local name=$1
  local repository=$2

  if [ ! -d $name ]; then
    git clone $repository $name
  else
    cd $name
    git reset --hard
    git clean -df
    git pull --rebase origin master
    cd ..
  fi
}

function sym_link_create_or_update {

    local file=$1
    local sym=$2

    if [ cmp -s $1 $2 ]; then
      fancy_echo "files are the same and symbolic link already created – nothing to do..."
    else:
      fancy_echo "symbolic link was already the created but the files are different..."
      now=$(date +%Y%m%d.%H%M%S)
      mv $1 $1.$now
      rm $2
      ln -s $1.$now $2
      fancy_echo "$1 moved to $1.$now and symbolic link to $2 re-established"
    fi
}

function brew_if_missing {
  if [ -d "/usr/local/Cellar/$1" ]; then
    echo "..... $1 is already installed"
  else
    brew install "$1"
  fi
}


fancy_echo "
###############################################################################
# prerequisites check                                                         #
###############################################################################
"

  if [[ "$OS" == "Darwin" ]]; then
    gecho "OS = $OS...congrats you've got a mac!"

    if [[ $Xcode_strict == true ]]; then
      announce "Xcode strict checking is on...let's see if you got the goods..."

      if [[ -d "/Applications/Xcode.app/Contents/Developer/" ]]; then
        if [[ $Ascii_art_mode == true ]]; then
          Xcode
        fi
        gecho "Xcode is installed! good job."
        # sudo "/usr/bin/xcode-select" -switch "/Applications/Xcode.app/Contents/Developer"

       else
        fancy_echo "you must have Xcode installed to proceed." 
        if [[ $Ascii_art_test_mode == true ]]; then
          gandalf

          fancy_echo "
          go back to the shadow. do not pass go. do not collect $200. 
          go straight to jail! j/k but gandalf is a straight up stickler about having the right tools.
          Xcode + Simulators are a beast of a download but free and much
          easier to get than a wizard's wrath."
        fi
        recho "
          grab Xcode from here:

          https://developer.apple.com/downloads/download.action?path=Developer_Tools/xcode_6.1/56841_xcode_6.1.dmg'

                or the Mac App Store

          https://itunes.apple.com/us/app/xcode/id497799835?mt=12#
          "
       fi
    fi
 fi



# might as well ask for password up-front, right?
sudo -v

# Keep-alive: update existing sudo time stamp if set, otherwise do nothing.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &


fancy_echo "install xcode command line tools...
======================================"

  xcode-select -p

  if [[ $? -ne 0 ]]; then
    sudo xcode-select --install
  fi


   xcodebuild -version

fancy_echo "accepting your Xcode license for you 
(if you haven't done so already)...
======================================"

  if [[ $? -ne 0 ]]; then
    sudo xcodebuild -license accept
    xcodebuild -version
  fi


fancy_echo "updating all of the OS X packages – 
getting you up to date with Apple...
======================================"

  sudo softwareupdate -i -a


###############################################################################
# brew & cask helper utils                                                    #
###############################################################################

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_is_installed() {
  local NAME=$(brew_expand_alias "$1")

  brew list -1 | grep -Fqx "$NAME"
}

brew_is_upgradable() {
  local NAME=$(brew_expand_alias "$1")

  brew outdated --quiet "$NAME" >/dev/null
  [[ $? -ne 0 ]]
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local NAME=$(brew_expand_alias "$1")
  local DOMAIN="homebrew.mxcl.$NAME"
  local PLIST="$DOMAIN.plist"

  mkdir -p ~/Library/LaunchAgents
  ln -sfv /usr/local/opt/$NAME/$PLIST ~/Library/LaunchAgents

  if launchctl list | grep -q $DOMAIN; then
    launchctl unload ~/Library/LaunchAgents/$PLIST >/dev/null
  fi
  launchctl load ~/Library/LaunchAgents/$PLIST >/dev/null
}


# cask helper utils
# ==============================

brew_cask_expand_alias() {
  brew cask info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_cask_is_installed() {
  local NAME=$(brew_cask_expand_alias "$1")
  brew cask list -1 | grep -Fqx "$NAME"
}

brew_cask_install() {
  if ! brew_cask_is_installed "$1"; then
    brew cask install "$@"
  fi
}

brew_cask_install_or_upgrade() {
  if brew_cask_is_installed "$1"; then
    echo "$1 is already installed, brew cask upgrade is not yet implemented"
  else
    brew cask install "$@"
  fi
}


fancy_echo "
###############################################################################
# homebrew & homebrew cask installation                                       #
###############################################################################
"

if ! command -v brew >/dev/null; then

  fancy_echo "installing homebrew – the missing package manager for OS X... 
  http://brew.sh/
  ======================================"

    if [[ -d "$(brew --prefix)/Cellar" ]]; then
      fancy_echo "cleaning up a previously failed homebrew install..."
      rm -rf "$(brew --prefix)/Cellar" "$(brew --prefix)/.git"
    else
      ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/install/master/install)
    fi

    fancy_echo "prefixing your shell's path with homebrew..."
      append_to_zshrc '# recommended by brew doctor'
      append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
      export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "homebrew is already installed. skipping homebrew installation..."
fi


fancy_echo "checking the homebrew installation and make sure everything is ok...
======================================"

  brew doctor


fancy_echo "updating homebrew formulae...
======================================"

  brew update


fancy_echo "upgrade all homebrew packages...
======================================"

  brew upgrade

# Tap Repos
brew tap homebrew/dupes
brew tap homebrew/versions
brew tap caskroom/cask
brew tap caskroom/versions
brew tap caskroom/fonts

fancy_echo "installing cask for homebrew – extends Homebrew and brings its elegance, 
simplicity, and speed to OS X applications and large binaries alike: 
http://caskroom.io/....
======================================"

  brew_install_or_upgrade 'caskroom/cask/brew-cask'


fancy_echo "
###############################################################################
# zsh shell installation                                                      #
###############################################################################
"

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="$2"

  if [[ -w "$HOME/.zshrc.local" ]]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if (( skip_new_line )); then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

if [[ "$SHELL" != /usr/local/bin/zsh ]]; then
  fancy_echo "homebrew zsh (/usr/local/bin/zsh) is not your current shell..."
    if [ ! -e /usr/local/bin/zsh ]; then
      fancy_echo "installing zsh via homebrew..."
      #ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      brew install zsh
    fi
  fancy_echo "changing your shell from $SHELL to /usr/local/bin/zsh ..."
  grep '/usr/local/bin/zsh' /etc/shells >/dev/null || echo "/usr/local/bin/zsh" | sudo tee -a /etc/shells >/dev/null
  #sudo dscl . change /users/$USER UserShell /bin/bash /usr/local/bin/zsh
  sudo chsh -s /usr/local/bin/zsh $USER 2>/dev/null
  fancy_echo "your current shell: " $SHELL
  announce "you're going to need to RESTART the new shell and the install script"

  exec zsh

  else
    yecho "you already have homebrew zsh installed...not installing it...moving along"
fi

fancy_echo "
###############################################################################
# text editor                                                                 #
###############################################################################
"



fancy_echo "
###############################################################################
# cloud utils                                                                 #
###############################################################################
"

fancy_echo "installing AWS CLI utils – get your devops on...
======================================"

  brew_install_or_upgrade 'awscli'

  # retrieves list of other amazon tools to install
  grep -l AmazonWebServicesFormula /usr/local/Library/Formula/*.rb | awk -F/ '{sub(/.rb$/,""); print "brew_install_or_upgrade " '$NF'}'


fancy_echo "
###############################################################################
# github utils                                                                #
###############################################################################
"

fancy_echo "Git your latest & greatest git on...
======================================"

  brew_install_or_upgrade 'git'


fancy_echo "installing GitHub CLI client...
======================================"

  brew_install_or_upgrade 'gh'


fancy_echo "
###############################################################################
# java dev env                                                                *
###############################################################################
"

announce "giving you a java development environment..."

fancy_echo "installing java 7 jdk...
======================================"

  brew cask install caskroom/versions/java7


fancy_echo "installing java 8 jdk...
======================================"

  # location will change eventually to... 
  # brew cask install caskroom/versions/java8
  brew_cask_install_or_upgrade 'java'


fancy_echo "installing maven...
======================================"

  brew_install_or_upgrade 'maven'


fancy_echo "installing ant...
======================================"

  brew_install_or_upgrade 'ant'


fancy_echo "installing gradle...
======================================"

  brew_install_or_upgrade 'gradle'


fancy_echo "installing intellij-idea-ce...
======================================"

  brew_cask_install_or_upgrade 'intellij-idea-ce'


announce "finished setting up your java development environment."


fancy_echo "
###############################################################################
# python dev env                                                              #
###############################################################################
"

announce "giving you a python development environment..."

fancy_echo "installing python...
======================================"

  brew_install_or_upgrade 'python'
  brew link --overwrite python


fancy_echo "installing pyenv-virtualenv...
======================================"

  brew_install_or_upgrade 'pyenv-virtualenv'


fancy_echo "installing pycharm-ce ...
======================================"

  brew_cask_install_or_upgrade 'pycharm-ce'

announce "finished setting up your python development environment."

fancy_echo "
###############################################################################
# virtual environments                                                        #
###############################################################################
"

announce "giving you some virtual environment love..."


fancy_echo "installing boot2docker – lightweight Linux distribution based on Tiny Core Linux made 
specifically to run Docker containers. It runs completely from RAM, weighs ~27MB and boots in ~5s...
http://boot2docker.io/
======================================"

  brew_install_or_upgrade 'boot2docker'


fancy_echo "installing vagrant – lightweight, reproducible, and portable development environments...
https://www.vagrantup.com/
======================================"

  brew_cask_install_or_upgrade 'vagrant'


fancy_echo "installing vagrant-manager ...
======================================"

  brew_cask_install_or_upgrade 'vagrant-manager'


fancy_echo "installing virtualbox – a performant and free x86 and AMD64/Intel64 virtualization product...
https://www.virtualbox.org/
======================================"

  brew_cask_install_or_upgrade 'virtualbox'


fancy_echo "install and update vagrant plugins ...
======================================"

  vagrant plugin install vagrant-salt
  vagrant plugin install vagrant-lxc
  vagrant plugin update

announce "finished setting up your virtual environments."

fancy_echo "
###############################################################################
# node dev env                                                                #
###############################################################################
"

announce "giving you a nodejs development environment..."

node_version="0.10.33"


fancy_echo "installing NVM, Node.js, and NPM, for running apps and installing JavaScript packages...
======================================"

  brew_install_or_upgrade 'nvm'


fancy_echo "installing node – a javascript framework for building fast, scalable network applications...
http://nodejs.org
======================================"

  brew_install_or_upgrade 'node'

# TODO cleanup...add to dotfiles exports.zsh
#export NODE_PATH="/usr/local/lib/node"
#export PATH="/usr/local/share/npm/bin:$PATH"


fancy_echo "installing yeoman - the web's scaffolding tool for modern webapps...
http://yeoman.io/
======================================"

  npm install -g yo


fancy_echo "installing bower - web sites are made of lots of things...frameworks, 
libraries, assets, utilities, and rainbows. Bower manages all these things for you...
http://bower.io/
======================================"

  npm install -g bower


fancy_echo "installing grunt - the javascript task runner...
http://gruntjs.com/
======================================"

  npm install -g grunt-cli


fancy_echo "installing mocha - a simple, flexible, fun javascript test framework for node...
http://mochajs.org...
======================================"

  npm install -g mocha

  #append_to_zshrc 'export PATH="$PATH:/usr/local/lib/node_modules"'
  append_to_zshrc 'source $(brew --prefix nvm)/nvm.sh' 1

  source $(brew --prefix nvm)/nvm.sh
  nvm install "$node_version"

  fancy_echo "Setting $node_version as the global default nodejs...
  ======================================"
  nvm alias default "$node_version"

announce "finished setting up your node.js development environment."


fancy_echo "
###############################################################################
# ruby dev env                                                                #
###############################################################################
"

fancy_echo "installing coreutils for you –  basic file, shell and text manipulation 
utilities of the GNU operating system....
http://www.gnu.org/software/coreutils/
======================================"
  
  export PATH="$(brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:$PATH"
  brew_install_or_upgrade coreutils


fancy_echo "installing rbenv for you ...
======================================"
if [[ ! -d "$HOME/.rbenv" ]]; then
  fancy_echo "Installing rbenv, to change Ruby versions ..."
  git clone https://github.com/sstephenson/rbenv.git "$HOME/.rbenv"
  append_to_zshrc 'export PATH="$HOME/.rbenv/bin:$PATH"'
  append_to_zshrc 'eval "$(rbenv init - zsh --no-rehash)"' 1
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init - zsh)"
fi

rehash_path="$HOME/.rbenv/plugins/rbenv-gem-rehash"

if [[ ! -d "$rehash_path" ]]; then
  fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
  git clone https://github.com/sstephenson/rbenv-gem-rehash.git "$rehash_path"
fi

ruby_build_path="$HOME/.rbenv/plugins/ruby-build"

if [[ -d "$ruby_build_path" ]]; then
  fancy_echo "Updating to latest ruby-build..."
  cd "$ruby_build_path" && git pull && cd -
else
  fancy_echo "Installing ruby-build..."
  git clone https://github.com/sstephenson/ruby-build.git "$ruby_build_path"
fi

fancy_echo "updating openssl – don't want your heart to bleed...
======================================"

  brew_install_or_upgrade 'openssl'

  brew unlink openssl && brew link openssl --force


latest_ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"
current_ruby_version="$(ruby -v | cut -d ' ' -f 2 | cut -d p -f 1)"

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

cat<<"COMMENT_OUT"
#if [ (verlt $current_ruby $latest_ruby && true || false) == true ]; then
if [ fcomp $current_ruby $latest_ruby_version ]; then
  fancy_echo "Your Ruby version is out of date...
  You have $current_ruby and the latest is $latest_ruby_version
  installing Ruby $latest_ruby_version w/ rbenv...
  ======================================"

    rbenv install -s "$latest_ruby_version"


  fancy_echo "Setting $latest_ruby_version as global default Ruby ...
  ======================================"

    rbenv global "$latest_ruby_version"

    echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
    echo 'eval "$(rbenv init -)"' >> ~/.zshenv

    rbenv rehash

    #source ~/.bash_profile
    source ~/.zshenv

    echo "the current ruby version is now: " "$(ruby -e 'print RUBY_VERSION')"
else
  fancy_echo "Your Ruby is already the latest version v"$current_ruby_version
fi
COMMENT_OUT

fancy_echo "Installing Ruby $ruby_version ..."
  rbenv install -s "$ruby_version"
fancy_echo "Setting $ruby_version as global default Ruby ..."
  rbenv global "$ruby_version"
  rbenv local "$ruby_version"
  rbenv rehash


fancy_echo "Updating your system with the latest Rubygems version...
======================================"

  gem update --system


fancy_echo "installing cocoapods for iOS dev...
======================================"

  gem install cocoapods


fancy_echo "installing tmuxinator...
======================================"

  gem install tmuxinator


fancy_echo "installing Bundler to install project-specific Ruby gems...
======================================"

  gem install bundler --no-document --pre


fancy_echo "Configuring Bundler for faster, parallel gem installation...
======================================"

  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))


fancy_echo "
###############################################################################
# shell utils                                                                 #
###############################################################################
"

fancy_echo "update to latest bash shell for security (eg. to avoid future shellshock type of issues)...
======================================"

  brew_install_or_upgrade 'bash'


cat <<"REPLACED_BY_PREZTO"
#fancy_echo "injecting your awesome zsh with steroids...
#======================================"

  #fancy_echo "installing yadr and its dependencies: https://github.com/skwp/dotfiles"
  #if [ ! -d "$HOME/.yadr" ]; then
  #  echo "installing YADR for the first time"
  #  git clone https://github.com/skwp/dotfiles.git "$HOME/.yadr"
  #  cd "$HOME/.yadr"
  #[ "$1" = "ask" ] && export ASK="false"
  #rake install
  #else
  #  echo "YADR is already installed"
  #fi


fancy_echo "installing antigen plugin manager for zsh – a small set of functions that help you easily manage your shell (zsh) plugins: https://github.com/zsh-users/antigen...
======================================"

 curl -L https://raw.githubusercontent.com/zsh-users/antigen/master/antigen.zsh > "${HOME}"/.antigen/antigen.zsh
 source "${HOME}"/.antigen/antigen.zsh
REPLACED_BY_PREZTO


fancy_echo "making your zsh shell look great...
======================================"

  if [ ! -d "$HOME/.zprezto" ]; then
    echo "installing prezto for the first time"
    git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
  else
    echo "prezto is already installed"
  fi


  fancy_echo "installing Pure prompt – a pretty, minimal and fast ZSH prompt:
  https://github.com/sindresorhus/pure ...
  ======================================"
  
    npm install -g pure-prompt


  fancy_echo "linking the prompt to ZSH...
  ======================================"
  
    sym_link_create_or_update "/usr/local/lib/node_modules/pure-prompt/pure.zsh" "/usr/local/share/zsh/site-functions/prompt_pure_setup"

cat<<"COMMENT"
fancy_echo "installing fontconfig...
======================================"

  brew_install_or_upgrade wget
  brew_install_or_upgrade fontconfig


fancy_echo "installing a few patched Powerline fonts (regular) - moar fonts @ https://github.com/Lokaltog/powerline-fonts ...
======================================"

  pushd ~/Library/Fonts
  wget "https://github.com/Lokaltog/powerline-fonts/raw/master/SourceCodePro/Sauce%20Code%20Powerline%20Medium.otf"
  wget "https://github.com/Lokaltog/powerline-fonts/raw/master/Menlo/Menlo%20Regular%20for%20Powerline.ttf"
  wget "https://github.com/Lokaltog/powerline-fonts/raw/master/AnonymousPro/Anonymice%20Powerline.ttf"
  wget "https://github.com/Lokaltog/powerline-fonts/raw/master/Meslo/Meslo%20LG%20M%20Regular%20for%20Powerline.otf"
  wget "https://github.com/Lokaltog/powerline-fonts/raw/master/UbuntuMono/Ubuntu%20Mono%20derivative%20Powerline.ttf"
  popd

  fc-cache -frv


fancy_echo "installing adobe source code pro font – a set of OpenType fonts that have been designed to work well in user interface (UI) environments...
======================================"

  brew_cask_install_or_upgrade 'font-source-code-pro'

COMMENT

fancy_echo "installing iTerm2 - provides actual benefits over the OSX terminal like applescript support,
auto-completing text, growl support, nice search features, mouseless copy, instant replay, and much more...
http://iterm2.com/features.html
======================================"

  brew_cask_install_or_upgrade 'iterm2-nightly'


fancy_echo "moar fonts please! installing powerline-patched fonts for your zsh pleasure...
https://github.com/Lokaltog/powerline-fonts
======================================"

  # Original idea : https://coderwall.com/p/dmhp5q
  pip install https://github.com/Lokaltog/powerline/tarball/develop
  # Original Idea : http://superuser.com/questions/120700/how-do-i-programatically-install-a-font-on-a-macintosh
  cd /tmp && cd `mktemp -d /tmp/tmp.XXXXX` && git clone https://github.com/Lokaltog/powerline-fonts && find -E `pwd`/powerline-fonts -iregex '.*\.(otf|ttf)' -print0 | xargs -0 -I {} cp -v {} ~/Library/Fonts
  cd /tmp && cd `mktemp -d /tmp/tmp.XXXXX` && curl -O -L https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf && mv -v PowerlineSymbols.otf ~/Library/Fonts
  # TODO install iTerm profiles
  fancy_echo "change shell's font to source code pro for your zsh theme"


fancy_echo "installing tmux – a terminal multiplexer (saves project state and switch between projects a way
to maintain persistent working states on remote servers, allowing you to detach and re-attach at will)...
http://tmux.sourceforge.net
======================================"

  brew_install_or_upgrade 'tmux'


fancy_echo "installing tree - lists the contents of directories in a tree-like format...
http://www.computerhope.com/unix/tree.htm
======================================"

  brew_install_or_upgrade 'tree'


fancy_echo "installing ack – a search tool like grep, optimized for programmers...
http://beyondgrep.com/
======================================
"
  brew_cask_install_or_upgrade 'ack'


fancy_echo "installing cheat – allows you to create and view interactive cheatsheets on the command-line...
https://github.com/chrisallenlane/cheat
======================================
"
  brew_cask_install_or_upgrade 'cheat'


fancy_echo "install dockutil – a python utility for managing the Mac OS X dock...
https://github.com/kcrawford/dockutil 
======================================"

  brew_install_or_upgrade 'dockutil'


fancy_echo "
###############################################################################
# misc utils                                                                  #
###############################################################################
"

fancy_echo "installing pt - a minimal client to use Pivotal Tracker from the console...
#======================================"

  gem install pt


fancy_echo "installing resty – a little command line REST client that you can use in pipelines(bash or zsh): http://thinkminimo.com ...
======================================"

  curl -L http://github.com/micha/resty/raw/master/resty > resty


fancy_echo "installing rcm – to manage your dotfiles...
======================================"
if ! command -v rcup >/dev/null; then
    brew tap thoughtbot/formulae
    brew_install_or_upgrade 'rcm'
else
  fancy_echo "rcm already installed. skipping rcm installation..."
fi

#########################################
# MY TODOs                              #
#########################################

# recurring / pervasive
#=======================================
# TODO - idempotence: use a tool like munki or get an idempotent installers for pip, bash, etc

# in progress
#=======================================
#TODO - alfred: workflows? (requires license), link cask-installed apps from ~/Applications to /Applications and put in dock w/ dockutil
#TODO - dockutil (setup-dock.py)
#TODO - prezto complete zsh customization

# next up
#=======================================

#TODO - ruby install idempotency: comparison for floating point values (major and minor versions)
#TODO - commit & document to Github!
#TODO - docker, vagrant, and salt
#TODO - BDD envt: Behave, pycharm, boto, etc
    #TODO – virtualenv-burrito? think so... https://github.com/brainsik/virtualenv-burrito

#TODO - iTerm2 profiles and settings
#TODO - tunnelblick vpn config (.ovpn)
#TODO - dotFiles
#TODO - seperate linkages of dotfiles, laptop, .osx and other install items to each other directly
          # source /dev/stdin <<< "$(curl --insecure https://raw.githubusercontent.com/jruffing/laptop/bsc-customization/.shield_streams.local)"
          # source /dev/stdin <<< "$(curl --insecure https://raw.githubusercontent.com/jruffing/laptop/bsc-customization/.laptop.local)"
          # cd; curl -L https://github.com/jruffing/dotfiles/tarball/bsc-customizations | tar -xzv --strip-components 1 --exclude={README.md,bootstrap.sh,LICENSE-MIT.txt}
          # ./.osx
          # chmod +x ./bin/setup-dock.py
          # setup default virtualenv (w/ virtualenvburrito)?
          # pip install pyobjc (into default virtual env...required by setup-dock.py)
          # ./bin/setup-dock.py


#TODO - paramaterize the bash scripts for highly customizeable install
#TODO - create control flow bash script 

# nice-to-have, last to be done
#=======================================
#TODO - polish - webex and other useful things
#TODO - pt (cmd line) & get task from all projects & per-project
#TODO - geektools? display tasks on desktop


announce "cleaning stuff up..."

  brew linkapps
  brew cleanup
  brew prune
  brew cask cleanup

# TODO – break the following out into a controlled flow scipt (see TODOs above)
fancy_echo "
###############################################################################
# Setup project development environments                                      #
###############################################################################
"

  prompt_timeout="8"

echo -n "Getting your project's development environments > " 
echo;
date; read -n1 -t $prompt_timeout -p "$(tput setaf 1) Do you test or develop on Shield Streams ? (yes/no) " yn; echo;
echo "$(date +%Y-%m-%d\ %H:%M:%S) Answer: $yn"
case "$yn" in
        [Yy]* ) echo "installing Shield Streams development environments...";
                echo "Do some stuff here for Shield Streams"
                ;;

        [Nn]* ) echo;
                echo "skipping Shield Streams development environment installation" 
                exit;;
            
            * ) echo "installing Shield Streams development environments...";
                echo "Do some stuff here for Shield Streams"
                ;;
esac


echo -n "Customizing your OS X settings > " 
echo;
date; read -n1 -t $prompt_timeout -p "$(tput setaf 1) Do you want to install a personal set of dotfiles ? (yes/no) " yn; echo;
echo "$(date +%Y-%m-%d\ %H:%M:%S) Answer: $yn"
case "$yn" in
        [Yy]* ) echo "installing your dotfiles...";
                source /dev/stdin <<< "$(curl --insecure https://raw.githubusercontent.com/jruffing/laptop/bsc-customization/.laptop.local)"
                ;;

        [Nn]* ) echo;
                echo "skipping personal dotfiles installation" 
                exit;;
            
            * ) echo "installing your dotfiles...";
                source /dev/stdin <<< "$(curl --insecure https://raw.githubusercontent.com/jruffing/laptop/bsc-customization/.laptop.local)"
                ;;
esac


cat<<"MODULARIZING_INSTALL"

fancy_echo "installing your Shield Stream project additions...
========================================"

  #if [[ -f ~/.shield_streams.local ]]; then
  #  source ~/.shield_streams.local
  #fi

  source /dev/stdin <<< "$(curl --insecure httpxs://raw.githubusercontent.com/jruffing/laptop/bsc-customization/.shield_streams.local)"; echo; exit;;


fancy_echo "installing your personal additions from ~/.laptop.local...
========================================"

  source /dev/stdin <<< "$(curl --insecure https://raw.githubusercontent.com/jruffing/laptop/bsc-customization/.laptop.local)"


fancy_echo "installing dotfiles, including ~/.osx — sensible hacker defaults for OS X...
========================================"
  
  # need to test
  source /dev/stdin <<< "$(curl --insecure https://raw.githubusercontent.com/jruffing/laptop/bsc-customization/.osx)"
  
  # works but trying method above
  #cd; curl -L https://github.com/jruffing/dotfiles/tarball/bsc-customizations | tar -xzv --strip-components 1 --exclude={README.md,bootstrap.sh,LICENSE-MIT.txt}
  #./.osx
  
MODULARIZING_INSTALL

echo -n "Customizing your Dock > " 
echo;
date; read -n1 -t $prompt_timeout -p "$(tput setaf 1) Would you like to have your Dock customized ? (yes/no) " yn; echo;
echo "$(date +%Y-%m-%d\ %H:%M:%S) Answer: $yn"
case "$yn" in
        [Yy]* ) echo "updating your dock...";
                pip install pyobjc
                ;;

        [Nn]* ) echo;
                echo "skipping dock customization" 
                exit;;
            
            * ) echo "updating your dock...";
                pip install pyobjc
                ;;
esac


date ; read -t $prompt_timeout -p "Congrats, setup is complete! Rebooting your computer now...Press ENTER or wait ten seconds" ; echo ; date;
echo
{
read -n1 -t $prompt_timeout -p "$(tput setaf 1) Congrats, setup is complete! Rebooting your computer now [reboot/quit] " rq
   fancy_echo "$(date +%Y-%m-%d\ %H:%M:%S) Answer: $rq"
   case "$rq" in
        [Rr]* ) sudo /sbin/reboot $*; echo; exit;;
        [Qq]* ) echo; exit;;
    * ) sudo /sbin/reboot $*; echo; exit;;
esac
}

#fancy_echo "setting your shell permanently to zsh...
#==============================="
#exec zsh

